/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InternationalOrderingSide.Views;

import InternationalOrderingSide.Controller.Controller;
import InternationalOrderingSide.Models.OrderedSiteDTO;
import OfficeSide.Models.ItemDTO;
import Site.Models.SiteItemDTO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wind
 */
public class ConfirmOrderDetailScreen extends javax.swing.JFrame {

    /**
     * Creates new form ConfirmOrderDetailScreen
     */
    int orderId;
    DefaultTableModel itemTableModel;
    List<ItemDTO> items;

    public ConfirmOrderDetailScreen(int orderID) {
        this.orderId = orderID;
        initComponents();
        itemTableModel = (DefaultTableModel) itemTable.getModel();
        loadItems();
    }

    public void loadItems() {
        items = Controller.getInstance().loadItemsByOrderId(orderId);

        int rowCount = itemTableModel.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            itemTableModel.removeRow(i);
        }
        for (int i = 0; i < items.size(); i++) {
            itemTableModel.addRow(new Object[]{items.get(i).getId(), items.get(i).getName(), items.get(i).getPrice(), items.get(i).getNumber()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        orderSiteBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Detail");

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Price", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemTable);
        if (itemTable.getColumnModel().getColumnCount() > 0) {
            itemTable.getColumnModel().getColumn(0).setResizable(false);
            itemTable.getColumnModel().getColumn(1).setResizable(false);
            itemTable.getColumnModel().getColumn(2).setResizable(false);
            itemTable.getColumnModel().getColumn(3).setResizable(false);
        }

        orderSiteBtn.setText("Order Site");
        orderSiteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderSiteBtnActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(orderSiteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(432, 432, 432)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(orderSiteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void orderSiteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderSiteBtnActionPerformed
        // TODO add your handling code here:
        List<Integer> idItems = new ArrayList<>();
        List<Integer> amountItems = new ArrayList<>();
        for (int i = 0; i < items.size(); i++) {
            idItems.add(items.get(i).getId());
            amountItems.add(items.get(i).getNumber());
        }
        for (int i = 0; i < idItems.size(); i++) {
            System.out.print(idItems.get(i) + ", ");
        }
        boolean isDelivable = true;
        for (int i = 0; i < amountItems.size(); i++) {
            List<SiteItemDTO> shipSites = new ArrayList<>();
            List<SiteItemDTO> airSites = new ArrayList<>();
            shipSites = Controller.getInstance().getSiteWithDeliverTypeAndItemIDSortASC(idItems.get(i), "Ship");
            airSites = Controller.getInstance().getSiteWithDeliverTypeAndItemIDSortASC(idItems.get(i), "Air");
            int amountItemIndex = amountItems.get(i);
            int totalShipSite = 0;
            int totalAirSite = 0;
            for (int j = 0; j < shipSites.size(); j++) {

                totalShipSite += shipSites.get(j).getAmount();
            }
            for (int j = 0; j < airSites.size(); j++) {

                totalAirSite += airSites.get(j).getAmount();
            }
            int totalAllSite = totalAirSite + totalShipSite;
            if (totalAllSite < amountItemIndex) {
                isDelivable = false;
                JOptionPane.showMessageDialog(this, "Out of site stock, can not order.");
                break;
            }
        }

        if (isDelivable) {
            for (int i = 0; i < amountItems.size(); i++) {
                System.out.println("item:" + i);
                List<SiteItemDTO> shipSites = new ArrayList<>();
                List<SiteItemDTO> airSites = new ArrayList<>();
                shipSites = Controller.getInstance().getSiteWithDeliverTypeAndItemIDSortASC(idItems.get(i), "Ship");
                airSites = Controller.getInstance().getSiteWithDeliverTypeAndItemIDSortASC(idItems.get(i), "Air");
                int amountItemIndex = amountItems.get(i);
                int totalShipSite = 0;
                int totalAirSite = 0;
                for (int j = 0; j < shipSites.size(); j++) {

                    totalShipSite += shipSites.get(j).getAmount();
                }
                for (int j = 0; j < airSites.size(); j++) {

                    totalAirSite += airSites.get(j).getAmount();
                }
                int totalAllSite = totalAirSite + totalShipSite;
                if (totalAllSite < amountItemIndex) {
                    System.out.println("bug");
                } else {
                    if (totalShipSite >= amountItemIndex) {
                        int j = 0;
                        while (amountItemIndex > 0) {
                            int num = shipSites.get(j).getAmount();
                            if (num <= amountItemIndex) {
                                amountItemIndex -= num;
                                Controller.getInstance().addOrderedSite(new OrderedSiteDTO(shipSites.get(j).getSite_id(), idItems.get(i), num, 0));
                                System.out.println("*********************");
                                Controller.getInstance().deleteSiteItem(shipSites.get(j).getSite_id(), idItems.get(i));
                            } else {
                                Controller.getInstance().addOrderedSite(new OrderedSiteDTO(shipSites.get(j).getSite_id(), idItems.get(i), amountItemIndex, 0));
                                System.out.println("-------------------------");
                                Controller.getInstance().updateSiteAmountItem(shipSites.get(j).getSite_id(), idItems.get(i), num - amountItemIndex);
                                amountItemIndex = 0;
                            }
                            j += 1;
                        }
                    } else {
                        int j = 0;
                        while (j < shipSites.size()) {
                            int num = shipSites.get(j).getAmount();
                            Controller.getInstance().addOrderedSite(new OrderedSiteDTO(shipSites.get(j).getSite_id(), idItems.get(i), num, 0));
                            System.out.println("***********************");
                            Controller.getInstance().deleteSiteItem(shipSites.get(j).getSite_id(), idItems.get(i));
                            amountItemIndex -= num;
                            j++;
                        }
                        j = 0;
                        while (amountItemIndex > 0) {
                            int num = airSites.get(j).getAmount();
                            if (num <= amountItemIndex) {
                                Controller.getInstance().addOrderedSite(new OrderedSiteDTO(airSites.get(j).getSite_id(), idItems.get(i), num, 0));
                                amountItemIndex -= num;
                                System.out.println("*********************");
                                Controller.getInstance().deleteSiteItem(airSites.get(j).getSite_id(), idItems.get(i));
                            } else {
                                Controller.getInstance().addOrderedSite(new OrderedSiteDTO(airSites.get(j).getSite_id(), idItems.get(i), amountItemIndex, 0));
                                System.out.println("-----------------------");
                                Controller.getInstance().updateSiteAmountItem(airSites.get(j).getSite_id(), idItems.get(i), num - amountItemIndex);
                                amountItemIndex = 0;
                            }
                            j++;
                        }

                    }
                }

            }
            Controller.getInstance().updateOrderByOrderId(orderId, 2);
        }
    }//GEN-LAST:event_orderSiteBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable itemTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton orderSiteBtn;
    // End of variables declaration//GEN-END:variables
}
